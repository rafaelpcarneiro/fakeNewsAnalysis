--
-- We will be interested on a small time interval, I, where we can
-- calculate the PPH of the complete Graph, instead of looking
-- for samples as before

-- PLaceholders
--    <BIN_EDGE_MIN>
--    <BIN_EDGE_LENGTH_MIN>

CREATE TABLE aWindow_nodes (
    nodes                INT  NOT NULL,
    PRIMARY KEY (nodes)
);

CREATE TABLE aWindow_edges (
    from_author_tweet_id INT  NOT NULL,
    to_author_tweet_id   INT  NOT NULL,

    path_length          INT  NOT NULL,
    weight               REAL NOT NULL,

    PRIMARY KEY (from_author_tweet_id, to_author_tweet_id)
);

CREATE TABLE paths_xy_WINDOW (
    from_tweet_id        INT  NOT NULL,
    to_tweet_id          INT  NOT NULL,
    
    from_author_tweet_id INT  NOT NULL,
    to_author_tweet_id   INT  NOT NULL,

    path_length          INT  NOT NULL,
    path_weight          REAL NOT NULL,

    PRIMARY KEY (from_tweet_id, to_tweet_id)

);

-- Calculate the weight of all edges inside a time window
INSERT INTO aWindow_edges
SELECT 
    from_author_tweet_id,
    to_author_tweet_id,
    path_distance,        -- variable name choosen to be consistent with old definitions
    AVG (
        strftime('%s', (SELECT x.created_at FROM tweet AS x WHERE x.tweet_id = to_tweet_id)) -
        strftime('%s', (SELECT y.created_at FROM tweet AS y WHERE y.tweet_id = from_tweet_id))
    ) AS weight
FROM 
    (SELECT *
     FROM 
        paths_xy
     WHERE
        from_author_tweet_id != -1
        AND from_author_tweet_id != to_author_tweet_id
        AND path_distance = 1
        AND EXISTS (
            SELECT *
            FROM tweet
            WHERE
                (tweet.tweet_id = paths_xy.from_tweet_id)
                AND strftime("%s", tweet.created_at)
                    - strftime("%s", <BIN_EDGE_MIN>) <= <BIN_EDGE_LENGTH_MIN> * 60
        )
        AND EXISTS (
            SELECT *
            FROM tweet
            WHERE
                (tweet.tweet_id = paths_xy.to_tweet_id)
                AND strftime("%s", tweet.created_at)
                    - strftime("%s", <BIN_EDGE_MIN>) <= <BIN_EDGE_LENGTH_MIN> * 60
        )
    )
GROUP BY
    from_author_tweet_id,
    to_author_tweet_id;

-- Get the table of nodes from the sampled edges
INSERT INTO aWindow_nodes
SELECT
    from_author_tweet_id
FROM
    aWindow_edges
UNION
SELECT
    to_author_tweet_id
FROM
    aWindow_edges;

-- Fill paths_xy_WINDOW
INSERT INTO paths_xy_WINDOW
SELECT 
    L.from_tweet_id,
    L.to_tweet_id,
    L.from_author_tweet_id,
    L.to_author_tweet_id,
    L.path_distance,
    R.weight
FROM 
    (SELECT *
     FROM paths_xy
     WHERE
        EXISTS (
            SELECT *
            FROM aWindow_edges
            WHERE
                paths_xy.from_author_tweet_id = aWindow_edges.from_author_tweet_id
                AND paths_xy.to_author_tweet_id = aWindow_edges.to_author_tweet_id
        )
    ) AS L
JOIN
    aWindow_edges AS R
ON
    L.from_author_tweet_id = R.from_author_tweet_id
    AND L.to_author_tweet_id = R.to_author_tweet_id;
